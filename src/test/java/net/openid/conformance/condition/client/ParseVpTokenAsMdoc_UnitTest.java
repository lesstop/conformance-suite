package net.openid.conformance.condition.client;

import net.openid.conformance.condition.Condition.ConditionResult;
import net.openid.conformance.logging.TestInstanceEventLog;
import net.openid.conformance.testmodule.Environment;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.charset.StandardCharsets;

import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class ParseVpTokenAsMdoc_UnitTest {

	@Spy
	private Environment env = new Environment();

	@Mock
	private TestInstanceEventLog eventLog;

	private ParseVpTokenAsMdoc cond;

	/*
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	public void setUp() throws Exception {
		cond = new ParseVpTokenAsMdoc();

		cond.setProperties("UNIT-TEST", eventLog, ConditionResult.INFO);
	}

	@Test
	public void testEvaluate_noError() throws Exception {
		// this was generated by running the VP tests against the OP tests
		String mdocStr = IOUtils.resourceToString("ParseVpTokenAsMdoc/mdoc.txt", StandardCharsets.UTF_8, getClass().getClassLoader());
		mdocStr = mdocStr.replace("\n", "");

		env.putString("credential", mdocStr);

		env.putString("session_transcript", "g/b2g1ggOEbrv0Z/TUtIFyLM5TDoNisYjlGK+Qx5dhFacE7xFz9YIPu4g9QyWrWNEI1T15XOjGVh9PezAUTVhIBTtU/aY4q0eCA4c2lnQTd0RzlHbllmV2VSZnJBRzVQTXBIT2lmLS5ffg==");

		cond.execute(env);

		verify(env, atLeastOnce()).getString("credential");
	}

	/*
	I don't have the corresponding mdoc generated nonce for this example; need to get a new example with that from Animo
	@Test
	public void testEvaluate_noError2() throws Exception {
		// this was provided by Animo as an mdoc generated by their wallet
		String mdocStr = IOUtils.resourceToString("ParseVpTokenAsMdoc/mdoc-animo.txt", StandardCharsets.UTF_8, getClass().getClassLoader());
		mdocStr = mdocStr.replace("\n", "");

		env.putString("vp_token", mdocStr);

		cond.execute(env);

		verify(env, atLeastOnce()).getString("vp_token");
	}
*/
}
