package net.openid.conformance.condition.client;

import net.openid.conformance.condition.Condition;
import net.openid.conformance.logging.TestInstanceEventLog;
import net.openid.conformance.testmodule.Environment;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.charset.StandardCharsets;

@ExtendWith(MockitoExtension.class)
public class DecryptResponse_UnitTest {

	@Spy
	private Environment env = new Environment();

	@Mock
	private TestInstanceEventLog eventLog;

	private DecryptResponse cond;

	@BeforeEach
	public void setUp() throws Exception {

		cond = new DecryptResponse();
		cond.setProperties("UNIT-TEST", eventLog, Condition.ConditionResult.INFO);
	}

	@Test
	public void testEvaluate_valuePresent() throws Exception {
		// this was generated by running the VP tests against https://github.com/spruceid/oid4vc-cli-wallet

		String responseFilename = "DecryptResponse/response.txt";
		String response = IOUtils.resourceToString(responseFilename, StandardCharsets.UTF_8, getClass().getClassLoader());
		response = response.replace("\n", "");

		String jwks = """
			{
			    "keys": [
			        {
			            "kty": "EC",
			            "d": "7N8jd8HvUp3vHC7a-xitehRnYuyZLy3kqkxG7KmpfMY",
			            "use": "enc",
			            "crv": "P-256",
			            "kid": "A541J5yUqazgE8WBFkIyeh2OtK-udqUR_OC0kB7l3oU",
			            "x": "cwYyuS94hcOtcPlrMMtGtflCfbZUwz5Mf1Gfa2m0AM8",
			            "y": "KB7sJkFQyB8jZHO9vmWS5LNECL4id3OJO9HX9ChNonA",
			            "alg": "ECDH-ES"
			        }
			    ]
			}
			""";

		env.putString("original_authorization_endpoint_response", "response", response);
		env.putObjectFromJsonString("client_jwks", jwks);

		cond.execute(env);

//	verify(env, atLeastOnce()).getElementFromObject("token_endpoint_response", "id_token");
//
//	assertThat(env.getObject("id_token")).isNotNull();
//	assertThat(env.getString("id_token", "value")).isEqualTo(OIDFJSON.getString(goodResponse.get("id_token")));
//	assertThat(env.getElementFromObject("id_token", "header")).isNotNull();
//	assertThat(env.getElementFromObject("id_token", "claims")).isNotNull();
	}

}
